// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  email       String  @unique
  phoneNumber String  @unique
  name        String?
  posts       Post[]
}

model Contact {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  email       String  @unique
  phoneNumber String  @unique
  employeeId String?  
  firstName        String
  lastName         String
}

model Employee {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  phoneNumber  String    @unique
  department   String
  role         String?
  gender       String    @default("Male")
  salary       String    @default("5000.00")
  emailAddress String    @unique
  password     String
  income       Income[] // Employee and Income is one to many because one employee can have mutliple incomes
  account      Account[]  //One to One because one EMployee can only have 1 Account
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Income {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fieldName  String
  fieldLabel String
  amount     Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Account {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  accountName String
  accountType String
  branch      String?
  holderName  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String   @db.ObjectId
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
}

enum Role {
  user
  admin
}
